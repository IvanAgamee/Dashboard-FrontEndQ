Index: src/modulos/ModuloSecciones/EditarSeccion.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\r\n  <q-page padding>\r\n    <q-card class=\"my-card text-center\">\r\n      <q-card class=\"q-pa-lg\">\r\n        <q-tabs v-model=\"tab\" class=\"bg-accent text-black\" align=\"justify\" narrow-indicator >\r\n          <q-tab name=\"infoGeneral\" label=\"Informacion general\" />\r\n          <q-tab name=\"archivos\" label=\"Adjuntos\" />\r\n          <q-tab name=\"materias\" label=\"Materias\" />\r\n        </q-tabs>\r\n        <q-separator />\r\n        <!-- PANEL 1: INFORMACION GENERAL -->\r\n        <q-tab-panels v-model=\"tab\" animated>\r\n          <q-tab-panel name=\"infoGeneral\">\r\n            <div class=\"text-h6 text-left q-ma-md\">¡Bienvenido al módulo de edición de un profesor!</div>\r\n            <div class=\"text-left q-mt-lg q-mx-lg\">A continuación se muestran los datos del profesor. En caso de no querer editar algun dato, no borrarlo:</div>\r\n            <div class=\"text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left\">Puedes editar el nombre del docente. Recuerda que el\r\n              formato debe ser: Juan Hernandez Sanchez</div>\r\n            <q-input rounded outlined dense v-model=\"objSeccion.titulo\" type=\"text\" label=\"Nombre completo del docente\" class=\"q-mx-lg\" />\r\n            <div class=\"text-left q-mt-lg q-mx-lg\">Edición de la descripción del docente.</div>\r\n            <div class=\"text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left\">El número maximo de palabras son: 250 palabras</div>\r\n            <q-input v-model=\"objSeccion.descripcion\" rows=\"3\" rounded outlined type=\"textarea\" class=\"q-mx-lg\"\r\n                     color=\"red-12\" label=\"Descripción\"/>\r\n            <div class=\"text-left q-mt-lg q-mx-lg\">Edición del resumen de su informacion academica.</div>\r\n            <div class=\"text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left\">El número maximo de palabras son: 250 palabras</div>\r\n            <q-input v-model=\"objSeccion.objeto\" rows=\"15\" rounded outlined type=\"textarea\" class=\"q-mx-lg\"\r\n                     color=\"red-12\" label=\"Información academica\"/>\r\n            <div class=\"text-right\">\r\n              <q-btn class=\"q-ma-lg q-px-md q-py-sm\" dense color=\"primary\" icon=\"check\" label=\"Siguiente\" @click=\"validarInputInfoGral()\" />\r\n            </div>\r\n          </q-tab-panel>\r\n          <!-- PANEL 2: ADJUNTOS -->\r\n          <q-tab-panel name=\"archivos\">\r\n            <div class=\"text-h6 text-left q-ma-md\">¡Bien hecho! Continue editando la siguiente información:</div>\r\n            <q-img v-if=\"!!fileImageDocente\" :src=\"fileImageDocente\"\r\n                   no-native-menu\r\n                   height=\"200px\"\r\n                   style=\"max-width: 220px\">\r\n              <div class=\"absolute-bottom text-subtitle1 text-center\">\r\n                Imagen del docente\r\n              </div>\r\n            </q-img>\r\n            <div class=\"text-left q-mt-lg q-mx-lg\">Edición de la carrera a la que pertenece el docente</div>\r\n            <div class=\"text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left\">Usted solo puede editar docentes de las carreras\r\n              a las que su usuario tiene permiso.</div>\r\n            <q-select rounded outlined dense option-label=\"nombre\" :options=\"optSelectPrograma\" v-model=\"selectedPrograma\" type=\"text\" label=\"Programas\" class=\"q-mx-lg\" />\r\n            <div class=\"text-left q-mt-lg q-mx-lg\">Edición del contacto de este docente.\r\n              Le recordamos que este contacto será público (No es obligatorio)</div>\r\n            <div class=\"text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left\">Recuerde que puede ser un número telefonico o un correo electronico.</div>\r\n            <q-input rounded outlined dense v-model=\"objSeccion.contacto\" type=\"text\" label=\"Contacto del docente\" class=\"q-mx-lg\" />\r\n            <div class=\"text-left q-mt-lg q-mx-lg\">Edición de foto del docente. Recuerda que esta foto será visualizada en la pagina oficial de la carrera, por ello\r\n              es importante cuidar la calidad de la misma.</div>\r\n            <div class=\"text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left\">Recuerda que si editas la foto, se sobrescribira\r\n              la foto actual y no será posible recuperarla. La foto puede ser en formato png y jpg.</div>\r\n            <q-file dense class=\"q-mx-lg\" outlined v-model=\"inputFile\" @change=\"uploadImageFunc\" label=\"Da click aqui si desea editar la imagen\">\r\n              <template v-slot:append><q-icon name=\"attachment\" color=\"orange\" /></template>\r\n            </q-file>\r\n            <div class=\"text-right\">\r\n              <q-btn class=\"q-mt-lg q-mx-lg\" label=\"Volver\" @click=\"tab='infoGeneral'\" />\r\n              <q-btn class=\"q-mt-lg\" color=\"primary\" icon=\"check\" label=\"Siguiente\" @click=\"validarInputAdjuntos()\" />\r\n            </div>\r\n          </q-tab-panel>\r\n          <!-- PANEL 3: MATERIAS -->\r\n          <q-tab-panel name=\"materias\">\r\n            <div class=\"text-h6 text-left q-ma-md\">¡Ya casi terminamos! Ahora edite cuidadosamente las materias que imparte este docente, en caso de ser necesario</div>\r\n            <div class=\"text-left q-ma-lg\">Debe marcar las casillas correspondientes a cada materia.</div>\r\n            <q-input v-model=\"objSeccion.materias\" rows=\"15\" rounded outlined type=\"textarea\" class=\"q-mx-lg\"\r\n                     color=\"red-12\" label=\"Información academica\"/>\r\n            <div class=\"text-right\">\r\n              <q-btn class=\"q-mt-lg q-mx-lg\" label=\"Volver\" @click=\"tab='archivos'\" />\r\n              <q-btn class=\"q-mt-lg\" color=\"primary\" icon=\"check\" label=\"Finalizar\" @click=\"validarInputMaterias()\" />\r\n            </div>\r\n          </q-tab-panel>\r\n        </q-tab-panels>\r\n      </q-card>\r\n    </q-card>\r\n  </q-page>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, watch } from 'vue'\r\nimport authStore from '../../stores/userStore.js';\r\nimport apiMateria from '../ModuloMateria/apiMateria.js'\r\nimport apiDocente from '../ModuloDocente/apiDocente.js'\r\nimport apiUpload from '../Apis/apiUpload.js'\r\nimport apiSeccion from '../ModuloSecciones/apiSecciones';\r\nimport swal from 'sweetalert';\r\nimport { Loading, Notify, QSpinnerGears } from 'quasar'\r\nimport { useRouter } from 'vue-router';\r\n\r\nconst router = useRouter();\r\nconst UserStore = authStore();\r\nconst tab = ref('infoGeneral')\r\nconst optSelectPrograma = ref(UserStore.getProgramas)\r\nconst selectedPrograma = ref(null)\r\nconst rows = ref([])\r\nconst selectedMaterias = ref([])\r\nconst objSeccion = ref({\r\n  seccionId: 0,\r\n  moduloId: 0,\r\n  programaId: 0,\r\n  titulo: '',\r\n  descripcion: '',\r\n  status: 1,\r\n  objeto: []\r\n});\r\n\r\nconst columns = [\r\n  { name: 'nombre', align: 'left', label: 'Nombre', field: row => row.nombre},\r\n  { name: 'area', align: 'left', label: 'Area', field: row => row.area},\r\n  { name: 'especialidad', align: 'left', label: 'Especialidad', field: row => row.especialidad},]\r\n\r\nconst dewataMaterias = async () => {\r\n  Loading.show({ spinner: QSpinnerGears, });\r\n  var id = {\r\n    seccionId: props.id\r\n  }\r\nconsole.log(props.id);\r\n\r\n  const data = await apiSeccion.getSeccionById(id);\r\n\r\n  selectedPrograma.value = optSelectPrograma.value.find(programa => programa.programaId === data.data.programaId);\r\n  objSeccion.value.seccionId = data.data.seccionId;\r\n  objSeccion.value.moduloId = data.data.moduloId;\r\n  objSeccion.value.programaId = data.data.programaId;\r\n  objSeccion.value.titulo = data.data.titulo;\r\n  objSeccion.value.descripcion = data.data.descripcion;\r\n  objSeccion.value.objeto = data.data.objeto;\r\n  Loading.hide()\r\n  return data;\r\n}\r\ndewataMaterias()\r\nconst props = defineProps({\r\n  id:{\r\n    type:Number,\r\n    required:true\r\n  }\r\n})\r\n// Agregar registros a la tabla\r\nconst agregarDocente = async () => {\r\n  Loading.show({ spinner: QSpinnerGears, })\r\n  objSeccion.value.programaId = selectedPrograma?.value?.id;\r\n  const response = await apiDocente.createDocente(objSeccion.value);\r\n  console.log(\"dfo0\"+response)\r\n  swal({\r\n    position: 'top-end',\r\n    icon: response.success==true ? 'success' : 'error',\r\n    title: response.success==true ? '¡Se ha editado correctamente el docente!'\r\n      : '¡Ha ocurrido un error! Intentelo de nuevo',\r\n    showConfirmButton: false,\r\n    timer: 1500})\r\n  router.push({path: \"/vistaDocente\",});\r\n  Loading.hide()\r\n}\r\n\r\nconst validarInputInfoGral = () => {\r\n  if (objSeccion.value.nombre == '' || objSeccion.value.descripcion == '' || objSeccion.value.infoAcademica == '') {\r\n    Notify.create({ type: 'negative', message: 'Debe llenar todos los campos', position: 'top'})\r\n  } else {\r\n    tab.value='archivos'\r\n  }}\r\n\r\nconst validarInputAdjuntos = () => {\r\n  if (!!!selectedPrograma.value) {\r\n    Notify.create({ type: 'negative', message: 'Debe seleccionar una carrera', position: 'top'})\r\n  } else {\r\n    tab.value='materias'\r\n  }}\r\n\r\nconst validarInputMaterias = () => {\r\n  if (selectedMaterias.value==null) {\r\n    Notify.create({ type: 'negative', message: 'Debe seleccionar al menos una materia', position: 'top'})\r\n  } else {\r\n    agregarDocente()\r\n  }}\r\n</script>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modulos/ModuloSecciones/EditarSeccion.vue b/src/modulos/ModuloSecciones/EditarSeccion.vue
--- a/src/modulos/ModuloSecciones/EditarSeccion.vue	(revision ec025200429df81e70d16b9f9a7141b6a0413c06)
+++ b/src/modulos/ModuloSecciones/EditarSeccion.vue	(date 1695008096581)
@@ -2,72 +2,55 @@
   <q-page padding>
     <q-card class="my-card text-center">
       <q-card class="q-pa-lg">
-        <q-tabs v-model="tab" class="bg-accent text-black" align="justify" narrow-indicator >
-          <q-tab name="infoGeneral" label="Informacion general" />
-          <q-tab name="archivos" label="Adjuntos" />
-          <q-tab name="materias" label="Materias" />
+        <q-tabs v-model="tab" class="bg-accent text-black" align="justify" narrow-indicator>
+          <q-tab name="infoGeneral" label="Informacion general"/>
+          <q-tab  v-if="objSeccion.objeto.length > 0" name="Contenido" label="Contenido"/>
         </q-tabs>
-        <q-separator />
+        <q-separator/>
         <!-- PANEL 1: INFORMACION GENERAL -->
         <q-tab-panels v-model="tab" animated>
           <q-tab-panel name="infoGeneral">
-            <div class="text-h6 text-left q-ma-md">¡Bienvenido al módulo de edición de un profesor!</div>
-            <div class="text-left q-mt-lg q-mx-lg">A continuación se muestran los datos del profesor. En caso de no querer editar algun dato, no borrarlo:</div>
-            <div class="text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left">Puedes editar el nombre del docente. Recuerda que el
-              formato debe ser: Juan Hernandez Sanchez</div>
-            <q-input rounded outlined dense v-model="objSeccion.titulo" type="text" label="Nombre completo del docente" class="q-mx-lg" />
+            <div class="text-h6 text-left q-ma-md">¡Bienvenido al módulo de edición de Sección!</div>
+            <div class="text-left q-mt-lg q-mx-lg">A continuación se muestran los datos de la presente sección. En caso
+              de no querer editar algun dato, no borrarlo:
+            </div>
+            <div class="text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left">Puedes editar el titulo de la
+              sección. Recuerda que el
+              nombre será visible en el sitio una vez publicado el cambio
+            </div>
+            <q-input rounded outlined dense v-model="objSeccion.titulo" type="text" label="Nombre de la seccion"
+                     class="q-mx-lg"/>
             <div class="text-left q-mt-lg q-mx-lg">Edición de la descripción del docente.</div>
-            <div class="text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left">El número maximo de palabras son: 250 palabras</div>
+            <div class="text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left">El número maximo de palabras
+              son: 250 palabras
+            </div>
             <q-input v-model="objSeccion.descripcion" rows="3" rounded outlined type="textarea" class="q-mx-lg"
                      color="red-12" label="Descripción"/>
-            <div class="text-left q-mt-lg q-mx-lg">Edición del resumen de su informacion academica.</div>
-            <div class="text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left">El número maximo de palabras son: 250 palabras</div>
-            <q-input v-model="objSeccion.objeto" rows="15" rounded outlined type="textarea" class="q-mx-lg"
-                     color="red-12" label="Información academica"/>
-            <div class="text-right">
-              <q-btn class="q-ma-lg q-px-md q-py-sm" dense color="primary" icon="check" label="Siguiente" @click="validarInputInfoGral()" />
-            </div>
+            <q-btn class="q-ma-lg q-px-md q-py-sm" dense color="primary" icon="check" label="Siguiente"
+                   @click="validarInputInfoGral()"/>
           </q-tab-panel>
           <!-- PANEL 2: ADJUNTOS -->
-          <q-tab-panel name="archivos">
-            <div class="text-h6 text-left q-ma-md">¡Bien hecho! Continue editando la siguiente información:</div>
-            <q-img v-if="!!fileImageDocente" :src="fileImageDocente"
-                   no-native-menu
-                   height="200px"
-                   style="max-width: 220px">
-              <div class="absolute-bottom text-subtitle1 text-center">
-                Imagen del docente
+          <q-tab-panel name="Contenido">
+
+            <div class="text-h6 text-center q-ma-md">Puntos de perfil de egreso.</div>
+
+            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px;">
+              <div v-for="(objeto, index) in objSeccion.objeto" :key="index">
+                <q-card style="margin-bottom: 15px;">
+                  <q-card-section class="bg-primary text-white">
+                    <div>{{ objeto.descripcion }}</div>
+                  </q-card-section>
+                  <q-separator></q-separator>
+                  <q-card-actions align="right">
+                    <q-btn flat>Editar</q-btn>
+                    <q-btn flat>Borrar</q-btn>
+                  </q-card-actions>
+                </q-card>
               </div>
-            </q-img>
-            <div class="text-left q-mt-lg q-mx-lg">Edición de la carrera a la que pertenece el docente</div>
-            <div class="text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left">Usted solo puede editar docentes de las carreras
-              a las que su usuario tiene permiso.</div>
-            <q-select rounded outlined dense option-label="nombre" :options="optSelectPrograma" v-model="selectedPrograma" type="text" label="Programas" class="q-mx-lg" />
-            <div class="text-left q-mt-lg q-mx-lg">Edición del contacto de este docente.
-              Le recordamos que este contacto será público (No es obligatorio)</div>
-            <div class="text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left">Recuerde que puede ser un número telefonico o un correo electronico.</div>
-            <q-input rounded outlined dense v-model="objSeccion.contacto" type="text" label="Contacto del docente" class="q-mx-lg" />
-            <div class="text-left q-mt-lg q-mx-lg">Edición de foto del docente. Recuerda que esta foto será visualizada en la pagina oficial de la carrera, por ello
-              es importante cuidar la calidad de la misma.</div>
-            <div class="text-caption text-weight-light q-mb-md q-mb-sm q-mx-lg text-left">Recuerda que si editas la foto, se sobrescribira
-              la foto actual y no será posible recuperarla. La foto puede ser en formato png y jpg.</div>
-            <q-file dense class="q-mx-lg" outlined v-model="inputFile" @change="uploadImageFunc" label="Da click aqui si desea editar la imagen">
-              <template v-slot:append><q-icon name="attachment" color="orange" /></template>
-            </q-file>
+            </div>
             <div class="text-right">
-              <q-btn class="q-mt-lg q-mx-lg" label="Volver" @click="tab='infoGeneral'" />
-              <q-btn class="q-mt-lg" color="primary" icon="check" label="Siguiente" @click="validarInputAdjuntos()" />
-            </div>
-          </q-tab-panel>
-          <!-- PANEL 3: MATERIAS -->
-          <q-tab-panel name="materias">
-            <div class="text-h6 text-left q-ma-md">¡Ya casi terminamos! Ahora edite cuidadosamente las materias que imparte este docente, en caso de ser necesario</div>
-            <div class="text-left q-ma-lg">Debe marcar las casillas correspondientes a cada materia.</div>
-            <q-input v-model="objSeccion.materias" rows="15" rounded outlined type="textarea" class="q-mx-lg"
-                     color="red-12" label="Información academica"/>
-            <div class="text-right">
-              <q-btn class="q-mt-lg q-mx-lg" label="Volver" @click="tab='archivos'" />
-              <q-btn class="q-mt-lg" color="primary" icon="check" label="Finalizar" @click="validarInputMaterias()" />
+              <q-btn class="q-mt-lg q-mx-lg" label="Volver" @click="tab='infoGeneral'"/>
+              <q-btn class="q-mt-lg" color="primary" icon="check" label="Siguiente" @click="validarInputAdjuntos()"/>
             </div>
           </q-tab-panel>
         </q-tab-panels>
@@ -77,15 +60,15 @@
 </template>
 
 <script setup>
-import { ref, watch } from 'vue'
+import {ref, watch} from 'vue'
 import authStore from '../../stores/userStore.js';
 import apiMateria from '../ModuloMateria/apiMateria.js'
 import apiDocente from '../ModuloDocente/apiDocente.js'
 import apiUpload from '../Apis/apiUpload.js'
 import apiSeccion from '../ModuloSecciones/apiSecciones';
 import swal from 'sweetalert';
-import { Loading, Notify, QSpinnerGears } from 'quasar'
-import { useRouter } from 'vue-router';
+import {Loading, Notify, QSpinnerGears} from 'quasar'
+import {useRouter} from 'vue-router';
 
 const router = useRouter();
 const UserStore = authStore();
@@ -105,19 +88,21 @@
 });
 
 const columns = [
-  { name: 'nombre', align: 'left', label: 'Nombre', field: row => row.nombre},
-  { name: 'area', align: 'left', label: 'Area', field: row => row.area},
-  { name: 'especialidad', align: 'left', label: 'Especialidad', field: row => row.especialidad},]
+  {name: 'nombre', align: 'left', label: 'Nombre', field: row => row.nombre},
+  {name: 'area', align: 'left', label: 'Area', field: row => row.area},
+  {name: 'especialidad', align: 'left', label: 'Especialidad', field: row => row.especialidad},]
 
+const props = defineProps({
+  id: {
+    type: Number,
+    required: true
+  }
+})
+console.log(props.id);
 const dewataMaterias = async () => {
-  Loading.show({ spinner: QSpinnerGears, });
-  var id = {
-    seccionId: props.id
-  }
-console.log(props.id);
-
-  const data = await apiSeccion.getSeccionById(id);
-
+  Loading.show({spinner: QSpinnerGears,});
+  const data = await apiSeccion.getSeccionById(props.id);
+  console.log(data);
   selectedPrograma.value = optSelectPrograma.value.find(programa => programa.programaId === data.data.programaId);
   objSeccion.value.seccionId = data.data.seccionId;
   objSeccion.value.moduloId = data.data.moduloId;
@@ -129,47 +114,46 @@
   return data;
 }
 dewataMaterias()
-const props = defineProps({
-  id:{
-    type:Number,
-    required:true
-  }
-})
+
 // Agregar registros a la tabla
 const agregarDocente = async () => {
-  Loading.show({ spinner: QSpinnerGears, })
+  Loading.show({spinner: QSpinnerGears,})
   objSeccion.value.programaId = selectedPrograma?.value?.id;
   const response = await apiDocente.createDocente(objSeccion.value);
-  console.log("dfo0"+response)
+  console.log("dfo0" + response)
   swal({
     position: 'top-end',
-    icon: response.success==true ? 'success' : 'error',
-    title: response.success==true ? '¡Se ha editado correctamente el docente!'
+    icon: response.success == true ? 'success' : 'error',
+    title: response.success == true ? '¡Se ha editado correctamente el docente!'
       : '¡Ha ocurrido un error! Intentelo de nuevo',
     showConfirmButton: false,
-    timer: 1500})
+    timer: 1500
+  })
   router.push({path: "/vistaDocente",});
   Loading.hide()
 }
 
 const validarInputInfoGral = () => {
   if (objSeccion.value.nombre == '' || objSeccion.value.descripcion == '' || objSeccion.value.infoAcademica == '') {
-    Notify.create({ type: 'negative', message: 'Debe llenar todos los campos', position: 'top'})
+    Notify.create({type: 'negative', message: 'Debe llenar todos los campos', position: 'top'})
   } else {
-    tab.value='archivos'
-  }}
+    tab.value = 'archivos'
+  }
+}
 
 const validarInputAdjuntos = () => {
   if (!!!selectedPrograma.value) {
-    Notify.create({ type: 'negative', message: 'Debe seleccionar una carrera', position: 'top'})
+    Notify.create({type: 'negative', message: 'Debe seleccionar una carrera', position: 'top'})
   } else {
-    tab.value='materias'
-  }}
+    tab.value = 'materias'
+  }
+}
 
 const validarInputMaterias = () => {
-  if (selectedMaterias.value==null) {
-    Notify.create({ type: 'negative', message: 'Debe seleccionar al menos una materia', position: 'top'})
+  if (selectedMaterias.value == null) {
+    Notify.create({type: 'negative', message: 'Debe seleccionar al menos una materia', position: 'top'})
   } else {
     agregarDocente()
-  }}
+  }
+}
 </script>
Index: src/modulos/ModuloSecciones/apiSecciones.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { api } from '../../boot/axios.js';\r\n\r\nconst getModulos = async () => {\r\n  try {\r\n    const response = await api.get('modulo/getModulos');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log('Se produjo un error al obtener los datos');\r\n    throw error;\r\n  }\r\n}\r\n\r\nconst getSeccionByProgramaId = async (data) => {\r\n  try {\r\n    const response = await api.get(`seccion/getSeccionByProgramaId?programaId=${data}`);\r\n    return response.data;\r\n  }\r\n  catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nconst getSeccionById = async (data) => {\r\n  try{\r\n    const response = await api.get(`seccion/getSeccionById?secccionId=${data}`)\r\n    return response.data;\r\n  }\r\n  catch (e){\r\n    throw e;\r\n  }\r\n}\r\nconst createSeccion = async (data) => {\r\n  try {\r\n    const response = await api.post('seccion/crudSeccion', data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log('Se produjo un error al obtener los datos');\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default {\r\n  getModulos, getSeccionByProgramaId, createSeccion, getSeccionById\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modulos/ModuloSecciones/apiSecciones.js b/src/modulos/ModuloSecciones/apiSecciones.js
--- a/src/modulos/ModuloSecciones/apiSecciones.js	(revision ec025200429df81e70d16b9f9a7141b6a0413c06)
+++ b/src/modulos/ModuloSecciones/apiSecciones.js	(date 1695008096588)
@@ -22,7 +22,7 @@
 
 const getSeccionById = async (data) => {
   try{
-    const response = await api.get(`seccion/getSeccionById?secccionId=${data}`)
+    const response = await api.get(`seccion/getSeccionById?seccionId=${data}`)
     return response.data;
   }
   catch (e){
Index: src/modulos/ModuloSecciones/VistaPrincipalSecciones.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\r\n  <q-page padding>\r\n    <q-card class=\"q-pt-lg q-pb-lg\">\r\n      <div class=\"row\">\r\n        <h6 class=\"col q-ma-sm q-ml-lg\">Registro de Secciones</h6>\r\n        <q-select filled color=\"blue-10\" v-model=\"selectedPrograma\" :options=\"optionsProgramas\" label=\"Programa\"\r\n                  transition-show=\"flip-up\" transition-hide=\"flip-down\" option-label=\"nombre\" option-value=\"id\"/>\r\n        <q-btn class=\"col-2 q-ma-sm q-mr-lg\" text-color=\"white\" color=\"secondary\" size=\"md\" label=\"Agregar seccion\"\r\n               @click=\"irAgregarseccion()\" dense ellipsis />\r\n      </div>\r\n      <q-separator style=\"margin:15px\" />\r\n      <q-input class=\"q-ma-lg\" v-model=\"search\" label=\"Buscar una seccion\" dense outlined clearable> <template v-slot:prepend>\r\n        <q-icon name=\"search\" />\r\n      </template> </q-input>\r\n      <!-- Estructura de la tabla -->\r\n      <q-table class=\"my-sticky-header-table q-ma-lg\" :rows=\"filteredRows\" :columns=\"columns\" header :rows-per-page-options=\"[10, 20, 50]\">\r\n        <!-- Agrega botones por cada registro de la tabla -->\r\n        <template v-slot:body=\"props\">\r\n          <q-tr :props=\"props\">\r\n            <q-td v-for=\"column in props.cols\" :key=\"column.name\" :props=\"props\">\r\n              <template v-if=\"column.name !== 'acciones'\">{{ props.row[column.name] }}</template>\r\n              <template v-else>\r\n                <q-btn-group>\r\n                  <q-btn v-for=\"accion in props.row.acciones\" :key=\"accion.nombre\" @click=\"accion.funcion()\"\r\n                         :class=\"{ 'btn-editar': accion.nombre === 'Editar', 'btn-eliminar': accion.nombre === 'Eliminar' }\"\r\n                         :icon=\"accion.nombre === 'Editar' ? 'fa-solid fa-pencil' : 'fa-solid fa-trash'\" size=\"11px\" />\r\n                </q-btn-group>\r\n              </template>\r\n            </q-td>\r\n          </q-tr>\r\n        </template>\r\n      </q-table>\r\n    </q-card>\r\n  </q-page>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, watch, computed } from \"vue\"\r\nimport { useQuasar } from 'quasar';\r\nimport authStore from '../../stores/userStore.js';\r\nimport MiModal from '../../components/MiModal.vue'\r\nimport apiSeccion from '../ModuloSecciones/apiSecciones.js';\r\nimport swal from 'sweetalert';\r\nimport { Loading, Notify, QSpinnerGears } from 'quasar'\r\nimport { useRouter } from 'vue-router';\r\n\r\nconst router = useRouter();\r\nconst $q = useQuasar();\r\nconst row = ref([])\r\nconst UserStore = authStore();\r\nconst search = ref();\r\n\r\nconst optionsProgramas = UserStore.getProgramas;\r\nconst selectedPrograma = ref(UserStore.getProgramas[0])\r\n\r\n// Columnas de la tabla\r\nconst columns = [\r\n  // { name: 'id', align: 'center', label: 'ID seccion', align: 'center', field: 'id', sortable: true },\r\n  { name: 'titulo', required: true, label: 'Titulo', align: 'center', field: 'titulo', format: val => `${val}`, sortable: true },\r\n  { name: 'descripcion', align: 'center', label: 'Descripcion', align: 'center', field: 'descripcion', sortable: true },\r\n  //{name: 'objeto', align: 'center', label: 'Objeto', align: 'center', field: 'objeto', sortable: true },\r\n  { name: 'acciones', align: 'center', label: 'Acciones', align: 'center', field: 'acciones', sortable: true }]\r\n\r\nconst filteredRows = computed(() => {\r\n  if (search.value) {\r\n    const searchTerm = search.value.toLowerCase();\r\n    return row.value.filter(row => {\r\n      return Object.values(row).some(value =>\r\n        String(value).toLowerCase().includes(searchTerm)\r\n      );\r\n    });\r\n  }\r\n  return row.value;\r\n});\r\n\r\n// Llenado de la tabla a traves del parametro id de carrera\r\nconst returnData = async (id) => {\r\n  row.value = [];\r\n  Loading.show({ spinner: QSpinnerGears, })\r\n  const data = await apiSeccion.getSeccionByProgramaId(id);\r\n  data.data.map((el) => {\r\n    var obj = {\r\n      id: el.seccionId,\r\n      titulo: el.titulo,\r\n      descripcion: el.descripcion?.length > 40 ? el.descripcion.substring(0, 40) + \"...\" : el.descripcion ?? '-',\r\n      objeto: Array.isArray(el.objeto) ? el.objeto.map(item => item.descripcion).join(', ').substring(0,50) : (el.objeto && typeof el.objeto === 'object' ? el.objeto.descripcion : '-'),\r\n      acciones: [\r\n        { nombre: 'Editar', funcion: () => {navegarEditarseccion(el)}, class: 'btn-primary' },\r\n        { nombre: 'Eliminar', funcion: () => {eliminarseccion(el.seccionId)}, class: 'btn-negative' }\r\n      ],\r\n    };\r\n    row.value.push(obj);\r\n  });\r\n  Loading.hide()\r\n};\r\n\r\nreturnData(selectedPrograma.value.programaId)\r\n\r\n// Observar cambios en el select\r\nwatch(selectedPrograma, (newVal, oldVal) => {\r\n  returnData(newVal.programaId)});\r\n\r\n// Navegar con spinners\r\nconst irAgregarseccion = async () => {\r\n  Loading.show({ spinner: QSpinnerGears, })\r\n  router.push({path: \"/agregarseccion\",});\r\n  Loading.hide()\r\n}\r\n\r\nconst navegarEditarseccion =  (el) => {\r\n  Loading.show({ spinner: QSpinnerGears, })\r\n  router.push({ name: 'editarSeccion', params:{id: el.seccionId}});\r\n  Loading.hide()}\r\n\r\n//Eliminar registros de la tabla\r\nconst eliminarSeccion = async (id) => {\r\n  $q.dialog({\r\n    title: 'Eliminar seccion',\r\n    message: '¿Estas seguro de eliminar este seccion?',\r\n    cancel: true,\r\n    color: 'blue'\r\n  }).onOk( async() => {\r\n    const data = {\r\n      seccionId: id,\r\n      status: 0}\r\n    Loading.show({ spinner: QSpinnerGears, })\r\n    const response = await apiseccion.createseccion(data);\r\n    swal({\r\n      position: 'top-end',\r\n      icon: response.success==true ? 'success' : 'error',\r\n      title: response.success==true ? '¡Se ha eliminado el seccion!'\r\n        : '¡Ha ocurrido un error! Intentelo de nuevo',\r\n      showConfirmButton: false,\r\n      timer: 1500})\r\n    Loading.hide()\r\n    filteredRows;\r\n    row.value = [];\r\n    returnData(selectedPrograma.value.programaId);\r\n  })\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '../../css/quasar.variables.scss';\r\n.my-sticky-header-table {\r\n  thead tr:first-child th {\r\n    background-color: $table;\r\n    font-weight: bold;\r\n    color: white;\r\n  }\r\n}\r\n\r\n.btn-editar {\r\n  background-color: $secondary;\r\n  color: white;\r\n}\r\n\r\n.btn-eliminar {\r\n  background-color: $negative;\r\n  color: white;\r\n}\r\n</style>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modulos/ModuloSecciones/VistaPrincipalSecciones.vue b/src/modulos/ModuloSecciones/VistaPrincipalSecciones.vue
--- a/src/modulos/ModuloSecciones/VistaPrincipalSecciones.vue	(revision ec025200429df81e70d16b9f9a7141b6a0413c06)
+++ b/src/modulos/ModuloSecciones/VistaPrincipalSecciones.vue	(date 1695008096585)
@@ -109,7 +109,7 @@
 
 const navegarEditarseccion =  (el) => {
   Loading.show({ spinner: QSpinnerGears, })
-  router.push({ name: 'editarSeccion', params:{id: el.seccionId}});
+  router.push({ name: 'editarSeccion', query:{id: el.seccionId}});
   Loading.hide()}
 
 //Eliminar registros de la tabla
Index: src/modulos/ModuloPrograma/apiPrograma.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { api } from '../../boot/axios.js';\r\n\r\nconst getModulos = async () => {\r\n  try {\r\n    const response = await api.get('modulo/getModulos');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log('Se produjo un error al obtener los datos');\r\n    throw error;\r\n  }\r\n}\r\n\r\nconst getProgramas = async () => {\r\n  try {\r\n    const response = await api.get('programa/getProgramas');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log('Se produjo un error al obtener los datos');\r\n    throw error;\r\n  }\r\n}\r\n\r\nconst getProgramasByDepartment = async (data) => {\r\n  try {\r\n    const response = await api.post('programa/getProgramasByDepartment', data);\r\n    return response.data;\r\n  }\r\n  catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nconst createProgramas = async (data) => {\r\n  try {\r\n    const response = await api.post('programa/crudPrograma', data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log('Se produjo un error al obtener los datos');\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default {\r\n  getModulos, getProgramas, getProgramasByDepartment, createProgramas\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modulos/ModuloPrograma/apiPrograma.js b/src/modulos/ModuloPrograma/apiPrograma.js
--- a/src/modulos/ModuloPrograma/apiPrograma.js	(revision ec025200429df81e70d16b9f9a7141b6a0413c06)
+++ b/src/modulos/ModuloPrograma/apiPrograma.js	(date 1695008096579)
@@ -22,7 +22,7 @@
 
 const getProgramasByDepartment = async (data) => {
   try {
-    const response = await api.post('programa/getProgramasByDepartment', data);
+    const response = await api.post('programa/getProgramasByDeparment', data);
     return response.data;
   }
   catch (error) {
Index: src/router/routes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const routes = [\r\n  {\r\n    path: '/',\r\n    component: () => import('layouts/MainLayout.vue'),\r\n    children: [\r\n      { path: '', component: () => import('../modulos/Modulo Dashboard/dashboardInicio.vue') },\r\n      { path: '/home', component: () => import('../modulos/Modulo Dashboard/dashboardInicio.vue') },\r\n      { path: '/vistaDocente', component: () => import('../modulos/ModuloDocente/VistaPrincipalDocente.vue') },\r\n      { path: '/agregarMateria', component: () => import('../modulos/ModuloMateria/AgregarMateria.vue') },\r\n      { path: '/vistaMateria', component: () => import('../modulos/ModuloMateria/VistaPrincipalMateria.vue') },\r\n      { path: '/vistaPrograma', component: () => import('../modulos/ModuloPrograma/VistaPrincipalPrograma.vue') },\r\n      { path: '/vistaComunidad', component: () => import('../modulos/ModuloComunidad/VistaPrincipalComunidad.vue') },\r\n      { path: '/agregarComunidad', component: () => import('../modulos/ModuloComunidad/AgregarComunidad.vue') },\r\n      { name: 'editComunidad', path: '/editarComunidad/:id', component: () => import('../modulos/ModuloComunidad/EditarComunidad.vue'), props: true, },\r\n      { path: '/vistaUsuario', component: () => import('../modulos/ModuloUsuario/VistaPrincipalUsuario.vue') },\r\n      { path: '/dashboardInicio', component: () => import('../modulos/Modulo Dashboard/dashboardInicio.vue') },\r\n      { path: '/agregarDocente', component: () => import('../modulos/ModuloDocente/AgregarDocente.vue') },\r\n      { name: 'editDocente', path: '/editarDocente/:id', component: () => import('../modulos/ModuloDocente/EditarDocente.vue'), props: true, },\r\n      { path: '/archivoEjemplo', component: () => import('../modulos/ModuloAlumno/Archivoejemplo.vue') },\r\n      { path: '/miPerfil', component: () => import('../modulos/ModuloMiPerfil/miPerfil.vue') },\r\n      { path: '/vistaSeccion', component: () => import('../modulos/ModuloSecciones/VistaPrincipalSecciones.vue')},\r\n      { path: '/agregarSeccion', component: () => import('../modulos/ModuloSecciones/AgregarSeccion.vue')},\r\n      { name: 'editarSeccion',path: '/editarSeccion', component: () => import('../modulos/ModuloSecciones/EditarSeccion.vue'),  props: true}\r\n\r\n    ]\r\n  },\r\n  {\r\n    path: '/login',\r\n    component: () => import('../layouts/LoginLayout.vue'),\r\n    children: [\r\n      {\r\n        path: 'index',\r\n        component: () => import('../modulos/ModuloLogin/VistaPrincipal.vue')\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    path: '/:catchAll(.*)*',\r\n    component: () => import('pages/ErrorNotFound.vue')\r\n  }\r\n]\r\n\r\nexport default routes\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/router/routes.js b/src/router/routes.js
--- a/src/router/routes.js	(revision ec025200429df81e70d16b9f9a7141b6a0413c06)
+++ b/src/router/routes.js	(date 1695008096591)
@@ -20,7 +20,7 @@
       { path: '/miPerfil', component: () => import('../modulos/ModuloMiPerfil/miPerfil.vue') },
       { path: '/vistaSeccion', component: () => import('../modulos/ModuloSecciones/VistaPrincipalSecciones.vue')},
       { path: '/agregarSeccion', component: () => import('../modulos/ModuloSecciones/AgregarSeccion.vue')},
-      { name: 'editarSeccion',path: '/editarSeccion', component: () => import('../modulos/ModuloSecciones/EditarSeccion.vue'),  props: true}
+      { name: 'editarSeccion',path: '/editarSeccion', component: () => import('../modulos/ModuloSecciones/EditarSeccion.vue'),    props: route => ({ id: route.query.id })}
 
     ]
   },
